{"version":3,"sources":["../src/position_simulator.ts"],"names":["_","Change","PositionSimulator","constructor","initial","legs","each","leg","symbol","list","push","getFlattenedList","chain","map","size","sumBy","compact","value","addLegs","flatMap","addLeg","existing","length","affected","changedBy","change","Opened","changeAmount","totalSize","created","pnl","result","newExisting","remaining","absRemaining","Math","abs","el","absSize","Closed","price","closedLeg","clone","Reduced","newLeg","undefined"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { OptionLeg, fullSymbol } from './types';\n\nexport enum Change {\n  // The leg in `changedBy` closed the affected leg.\n  Closed,\n\n  // A new position was opened by this leg. `affected` and `changedBy` will be the same object.\n  Opened,\n\n  // A position was partially closed by a leg. This will always be followed by an Closed result for the closed portion of the legs.\n  // When the result is Reduced, `affected.size` will reflect the new number of options in the leg.\n  Reduced,\n}\n\nexport interface SimulationStep {\n  affected : OptionLeg;\n  changedBy: OptionLeg;\n  change: Change;\n  changeAmount : number;\n  totalSize: number;\n  pnl? : number;\n  created: boolean;\n}\n\nexport type SimulationResults = SimulationStep[];\n\n// Simulate executions and their effect on a portfolio.\nexport class PositionSimulator {\n\n  legs : {[key:string]: OptionLeg[]};\n\n  constructor(initial? : OptionLeg[]) {\n    this.legs = {};\n    _.each(initial, (leg) => {\n      let symbol = leg.symbol;\n      let list = this.legs[symbol];\n      if(list) {\n        list.push(leg);\n      } else {\n        this.legs[symbol] = [leg];\n      }\n    });\n  }\n\n  getFlattenedList() : OptionLeg[] {\n    return _.chain(this.legs)\n      .map((legs, symbol) => {\n        let size = _.sumBy(legs, 'size');\n        if(size !== 0) {\n          return { symbol, size };\n        }\n      })\n      .compact()\n      .value();\n  }\n\n  addLegs(legs : OptionLeg[]) : SimulationResults {\n    return _.flatMap(legs, (leg) => this.addLeg(leg));\n  }\n\n  addLeg(leg : OptionLeg) : SimulationResults {\n    let symbol = leg.symbol;\n    let existing = this.legs[symbol];\n    if(!existing || !existing.length) {\n      this.legs[symbol] = [leg];\n      return [{\n        affected: leg,\n        changedBy: leg,\n        change: Change.Opened,\n        changeAmount: leg.size,\n        totalSize: leg.size,\n        created: true,\n        pnl: 0, // Never any P&L on an opening.\n      }];\n    } else if(existing[0].size * leg.size > 0) {\n      // The size of the existing legs and the new leg have the same sign, so this is expanding an existing position.\n      existing.push(leg);\n      return [{\n        affected: leg,\n        changedBy: leg,\n        change: Change.Opened,\n        changeAmount: leg.size,\n        totalSize: _.sumBy(existing, 'size'),\n        created: true,\n        pnl: 0,\n      }];\n    }\n\n    // If we get down to here, then it's closing a position.\n    let result : SimulationResults = [];\n    let newExisting : OptionLeg[] = [];\n    let totalSize = _.sumBy(existing, 'size') + leg.size;\n\n    let remaining = leg.size;\n    let absRemaining = Math.abs(remaining);\n\n    _.each(existing, (el) => {\n      let absSize = Math.abs(el.size);\n      if(absSize <= absRemaining) {\n        // The new leg completely closes out this one.\n        result.push({\n          affected: el,\n          changedBy: leg,\n          change: Change.Closed,\n          changeAmount: -el.size,\n          totalSize,\n          created: false,\n          pnl: (el.price - leg.price) * el.size,\n        });\n\n        remaining -= el.size;\n        absRemaining -= absSize;\n\n      } else if(absRemaining !== 0) {\n        // The new leg partially closes this one, so split it into two legs, one that is the closed portion and one that is the\n        // still-active portion.\n        el.size += remaining;\n        newExisting.push(el);\n\n        // The closed leg should be the newly created object, so that the one that remains in the system is the same leg that was originally added.\n        let closedLeg = _.clone(el);\n        closedLeg.size = -remaining;\n\n        result.push(\n          {\n            affected: el,\n            changedBy: leg,\n            change: Change.Reduced,\n            changeAmount: remaining,\n            totalSize,\n            created: false,\n            pnl: null,\n          },\n          {\n            affected: closedLeg,\n            changedBy: leg,\n            change: Change.Closed,\n            changeAmount: remaining,\n            totalSize,\n            created: true,\n            pnl: (el.price - leg.price) * remaining,\n          },\n        );\n\n        remaining = absRemaining = 0;\n\n      } else {\n        // No effect since the new leg has already been applied fully.\n        newExisting.push(el);\n      }\n    });\n\n    if(absRemaining > 0) {\n      // This leg not only closed some positions, but opened new ones.\n      let newLeg = _.clone(leg);\n      newLeg.size = remaining;\n\n      result.push({\n        affected: newLeg,\n        changedBy: leg,\n        change: Change.Opened,\n        changeAmount: newLeg.size,\n        totalSize,\n        created: true,\n        pnl: null,\n      });\n    }\n\n    this.legs[symbol] = newExisting.length ? newExisting : undefined;\n    return result;\n  }\n}\n"],"file":"position_simulator.js"}