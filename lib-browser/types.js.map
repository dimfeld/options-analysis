{"version":3,"sources":["../src/types.ts"],"names":["isNil","trimStart","padStart","padEnd","occExpirationFromDate","d","year","getUTCFullYear","toString","slice","month","getUTCMonth","day","getUTCDate","dateFromOccExpiration","e","Date","fullSymbol","ol","padSymbol","call","strike","legType","symbol","underlying","expiration","optionInfoFromSymbol","trim","length","undefined","optionInfoFromLeg","leg","id","size"],"mappings":"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","sourcesContent":["import isNil from 'lodash/isNil';\nimport trimStart from 'lodash/trimStart';\nimport padStart from 'lodash/padStart';\nimport padEnd from 'lodash/padEnd';\n\nexport interface TradeLeg {\n  size: number;\n  price: number;\n  symbol: string;\n}\n\nexport interface Trade {\n  price_each: number;\n  gross: number;\n  legs: TradeLeg[];\n}\n\nexport interface Position<T extends Trade> {\n  symbol: string;\n  legs: OptionLeg[];\n  trades: T[];\n}\n\nexport interface OptionLeg {\n  id?: string;\n  symbol: string;\n  size: number;\n  price?: number;\n}\n\nexport interface OptionInfo {\n  id?: string;\n  underlying: string;\n  strike: number;\n  expiration: string;\n  call: boolean;\n  size?: number;\n}\n\nexport function occExpirationFromDate(d: Date) {\n  let year = d\n    .getUTCFullYear()\n    .toString()\n    .slice(2);\n  let month = padStart((d.getUTCMonth() + 1).toString(), 2, '0');\n  let day = padStart(d.getUTCDate().toString(), 2, '0');\n  return `${year}${month}${day}`;\n}\n\nexport function dateFromOccExpiration(e: string) {\n  let year = '20' + e.slice(0, 2);\n  return new Date(+year, +e.slice(2, 4) - 1, +e.slice(4));\n}\n\nexport function fullSymbol(ol: OptionInfo, padSymbol = true) {\n  if (!isNil(ol.call) && ol.strike) {\n    let legType = ol.call ? 'C' : 'P';\n    let strike = padStart((ol.strike * 1000).toString(), 8, '0').slice(0, 8);\n    let symbol = padSymbol ? padEnd(ol.underlying, 6, ' ') : ol.underlying;\n    return `${symbol}${ol.expiration}${legType}${strike}`;\n  } else {\n    // Otherwise it's just an equity.\n    return ol.underlying;\n  }\n}\n\nexport function optionInfoFromSymbol(symbol: string): OptionInfo {\n  let underlying = symbol.slice(0, 6).trim();\n  if (symbol.length <= 6) {\n    return {\n      underlying,\n      expiration: undefined,\n      call: undefined,\n      strike: undefined,\n    };\n  }\n\n  return {\n    underlying,\n    expiration: symbol.slice(6, 12),\n    call: symbol[12] === 'C',\n    strike: +trimStart(symbol.slice(13)) / 1000,\n  };\n}\n\nexport function optionInfoFromLeg(leg: OptionLeg): OptionInfo {\n  return {\n    id: leg.id,\n    size: leg.size,\n    ...optionInfoFromSymbol(leg.symbol),\n  };\n}\n"],"file":"types.js"}