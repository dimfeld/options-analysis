{"version":3,"sources":["../src/types.ts"],"names":["_","occExpirationFromDate","d","year","getUTCFullYear","toString","slice","month","padStart","getUTCMonth","day","getUTCDate","dateFromOccExpiration","e","Date","fullSymbol","ol","padSymbol","isNil","call","strike","legType","symbol","padEnd","underlying","expiration","optionInfoFromSymbol","trim","length","undefined","trimStart","optionInfoFromLeg","leg","id","size"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nexport interface TradeLeg {\n  size: number;\n  price: number;\n  symbol: string;\n}\n\nexport interface Trade {\n  price_each: number;\n  gross: number;\n  legs: TradeLeg[];\n}\n\nexport interface Position<T extends Trade> {\n  symbol: string;\n  legs: OptionLeg[];\n  trades: T[];\n}\n\nexport interface OptionLeg {\n  id?: string;\n  symbol: string;\n  size: number;\n  price?: number;\n}\n\nexport interface OptionInfo {\n  id?: string;\n  underlying: string;\n  strike: number;\n  expiration: string;\n  call: boolean;\n  size?: number;\n}\n\nexport function occExpirationFromDate(d: Date) {\n  let year = d\n    .getUTCFullYear()\n    .toString()\n    .slice(2);\n  let month = _.padStart((d.getUTCMonth() + 1).toString(), 2, '0');\n  let day = _.padStart(d.getUTCDate().toString(), 2, '0');\n  return `${year}${month}${day}`;\n}\n\nexport function dateFromOccExpiration(e: string) {\n  let year = '20' + e.slice(0, 2);\n  return new Date(+year, +e.slice(2, 4) - 1, +e.slice(4));\n}\n\nexport function fullSymbol(ol: OptionInfo, padSymbol = true) {\n  if (!_.isNil(ol.call) && ol.strike) {\n    let legType = ol.call ? 'C' : 'P';\n    let strike = _.padStart((ol.strike * 1000).toString(), 8, '0').slice(0, 8);\n    let symbol = padSymbol ? _.padEnd(ol.underlying, 6, ' ') : ol.underlying;\n    return `${symbol}${ol.expiration}${legType}${strike}`;\n  } else {\n    // Otherwise it's just an equity.\n    return ol.underlying;\n  }\n}\n\nexport function optionInfoFromSymbol(symbol: string): OptionInfo {\n  let underlying = symbol.slice(0, 6).trim();\n  if (symbol.length <= 6) {\n    return {\n      underlying,\n      expiration: undefined,\n      call: undefined,\n      strike: undefined,\n    };\n  }\n\n  return {\n    underlying,\n    expiration: symbol.slice(6, 12),\n    call: symbol[12] === 'C',\n    strike: +_.trimStart(symbol.slice(13)) / 1000,\n  };\n}\n\nexport function optionInfoFromLeg(leg: OptionLeg): OptionInfo {\n  return {\n    id: leg.id,\n    size: leg.size,\n    ...optionInfoFromSymbol(leg.symbol),\n  };\n}\n"],"file":"types.js"}