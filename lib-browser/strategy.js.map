{"version":3,"sources":["../src/strategy.ts"],"names":["optionInfoFromLeg","_","isShort","leg","size","isLong","isShortPut","call","isLongPut","isShortCall","isLongCall","LegType","legType","ShortCall","ShortPut","LongCall","LongPut","UnknownCombo","calculateComboScore","orderedLegs","length","x","i","type","comboScoreFromTypes","types","comboScores","shortIronCondor","shortInvertedIronCondor","shortStrangle","invertedShortStrangle","longStrangle","invertedLongStrangle","putCreditSpread","callCreditSpread","putDebitSpread","callDebitSpread","shortSinglePut","shortSingleCall","longSinglePut","longSingleCall","formatExpiration","expiration","sameExpDescribers","exp","legs","name","strike","classify","optionInfos","map","sortBy","score","otherLegs","slice","allSameExpiration","every","allSameSize","describer"],"mappings":"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","sourcesContent":["import { OptionLeg, OptionInfo, optionInfoFromLeg } from './types';\nimport _ from 'lodash';\n\nexport type Classifier = (\n  legs: OptionLeg[],\n  score: ComboScore\n) => string | null;\n\nexport function isShort(leg: OptionInfo) {\n  return leg.size < 0;\n}\nexport function isLong(leg: OptionInfo) {\n  return leg.size > 0;\n}\nexport function isShortPut(leg: OptionInfo) {\n  return !leg.call && isShort(leg);\n}\nexport function isLongPut(leg: OptionInfo) {\n  return !leg.call && isLong(leg);\n}\nexport function isShortCall(leg: OptionInfo) {\n  return leg.call && isShort(leg);\n}\nexport function isLongCall(leg: OptionInfo) {\n  return leg.call && isLong(leg);\n}\n\nexport enum LegType {\n  ShortPut = 0,\n  LongPut = 1,\n  ShortCall = 2,\n  LongCall = 3,\n}\n\nexport function legType(leg: OptionInfo): LegType {\n  if (isShort(leg)) {\n    return leg.call ? LegType.ShortCall : LegType.ShortPut;\n  } else {\n    return leg.call ? LegType.LongCall : LegType.LongPut;\n  }\n}\n\nexport type ComboScore = number;\nexport const UnknownCombo: ComboScore = 1;\n\nexport function calculateComboScore(orderedLegs: OptionInfo[]): ComboScore {\n  if (orderedLegs.length > 8) {\n    return UnknownCombo;\n  }\n\n  let x: ComboScore = 0;\n  for (let i = 0; i < orderedLegs.length; i++) {\n    let type = legType(orderedLegs[i]);\n    x |= type << (i * 2);\n  }\n  return x;\n}\n\nexport function comboScoreFromTypes(types: LegType[]): ComboScore {\n  let x: ComboScore = 0;\n  for (let i = 0; i < types.length; i++) {\n    x |= types[i] << (i * 2);\n  }\n  return x;\n}\n\nexport const comboScores = {\n  // Also iron butterfly\n  shortIronCondor: comboScoreFromTypes([\n    LegType.LongPut,\n    LegType.ShortPut,\n    LegType.ShortCall,\n    LegType.LongCall,\n  ]),\n  shortInvertedIronCondor: comboScoreFromTypes([\n    LegType.LongPut,\n    LegType.ShortCall,\n    LegType.ShortPut,\n    LegType.LongCall,\n  ]),\n  // TODO maybe other inverted IC combinations?\n\n  shortStrangle: comboScoreFromTypes([LegType.ShortPut, LegType.ShortCall]), // and straddle\n  invertedShortStrangle: comboScoreFromTypes([\n    LegType.ShortCall,\n    LegType.ShortPut,\n  ]),\n  longStrangle: comboScoreFromTypes([LegType.LongPut, LegType.LongCall]), // and straddle\n  invertedLongStrangle: comboScoreFromTypes([\n    LegType.LongCall,\n    LegType.LongPut,\n  ]),\n  putCreditSpread: comboScoreFromTypes([LegType.LongPut, LegType.ShortPut]),\n  callCreditSpread: comboScoreFromTypes([LegType.ShortCall, LegType.LongCall]),\n  putDebitSpread: comboScoreFromTypes([LegType.ShortPut, LegType.LongPut]),\n  callDebitSpread: comboScoreFromTypes([LegType.LongCall, LegType.ShortCall]),\n  shortSinglePut: comboScoreFromTypes([LegType.ShortPut]),\n  shortSingleCall: comboScoreFromTypes([LegType.ShortCall]),\n  longSinglePut: comboScoreFromTypes([LegType.LongPut]),\n  longSingleCall: comboScoreFromTypes([LegType.LongCall]),\n\n  // TODO Diagonal, double diagonal, calendars, ratios\n};\n\nexport function formatExpiration(expiration: string) {\n  // In the future this will format with a nice month/year/day.\n  return expiration;\n}\n\nexport const sameExpDescribers = {\n  [comboScores.shortIronCondor]: (exp: string, legs: OptionInfo[]) => {\n    let name =\n      legs[1].strike === legs[2].strike ? 'Iron Butterfly' : 'Iron Condor';\n    return `${-legs[0].size} ${exp} ${legs[0].strike}/${legs[1].strike}P ${\n      legs[2].strike\n    }/${legs[3].strike}C ${name}`;\n  },\n  [comboScores.shortInvertedIronCondor]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} Inverted Iron Condor ${legs[0].strike}/${\n      legs[1].strike\n    }P ${legs[2].strike}/${legs[3].strike}C`;\n  },\n  [comboScores.shortStrangle]: (exp: string, legs: OptionInfo[]) => {\n    if (legs[0].strike === legs[1].strike) {\n      return `${-legs[0].size} ${exp} ${legs[0].strike} Short Straddle`;\n    } else {\n      return `${-legs[0].size} ${exp} ${legs[0].strike}P ${\n        legs[1].strike\n      }C Short Strangle`;\n    }\n  },\n  [comboScores.invertedShortStrangle]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike}C ${\n      legs[1].strike\n    }P Inverted Short Strangle`;\n  },\n  [comboScores.longStrangle]: (exp: string, legs: OptionInfo[]) => {\n    if (legs[0].strike === legs[1].strike) {\n      return `${legs[0].size} ${exp} ${legs[0].strike} Long Straddle`;\n    } else {\n      return `${legs[0].size} ${exp} ${legs[0].strike}P ${legs[1].strike}C Long Strangle`;\n    }\n  },\n  [comboScores.invertedLongStrangle]: (exp: string, legs: OptionInfo[]) => {\n    if (legs[0].strike === legs[1].strike) {\n      return `${legs[0].size} ${exp} ${legs[0].strike} Inverted Long Straddle`;\n    } else {\n      return `${legs[0].size} ${exp} ${legs[0].strike}C ${legs[1].strike}P Interted Long Strangle`;\n    }\n  },\n\n  [comboScores.putCreditSpread]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike}/${\n      legs[1].strike\n    }P Put Credit Spread`;\n  },\n  [comboScores.callCreditSpread]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike}/${\n      legs[1].strike\n    }C Call Credit Spread`;\n  },\n  [comboScores.putDebitSpread]: (exp: string, legs: OptionInfo[]) => {\n    return `${legs[0].size} ${exp} ${legs[0].strike}/${legs[1].strike}P Put Debit Spread`;\n  },\n  [comboScores.callDebitSpread]: (exp: string, legs: OptionInfo[]) => {\n    return `${legs[0].size} ${exp} ${legs[0].strike}/${legs[1].strike}C Call Debit Spread`;\n  },\n\n  [comboScores.shortSinglePut]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike} Short Put`;\n  },\n  [comboScores.shortSingleCall]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike} Short Call`;\n  },\n  [comboScores.longSinglePut]: (exp: string, legs: OptionInfo[]) => {\n    return `${legs[0].size} ${exp} ${legs[0].strike} Long Put`;\n  },\n  [comboScores.longSingleCall]: (exp: string, legs: OptionInfo[]) => {\n    return `${legs[0].size} ${exp} ${legs[0].strike} Long Call`;\n  },\n};\n\nexport function classify(legs: OptionLeg[]) {\n  let optionInfos = _.map(legs, optionInfoFromLeg);\n  let orderedLegs = _.sortBy(optionInfos, ['strike', 'call', 'expiration']);\n  let score = calculateComboScore(orderedLegs);\n  let expiration = optionInfos[0].expiration;\n  let size = optionInfos[0].size;\n\n  let otherLegs = optionInfos.slice(1);\n  let allSameExpiration = _.every(\n    otherLegs,\n    (leg) => leg.expiration === expiration\n  );\n  let allSameSize = _.every(otherLegs, (leg) => leg.size === size);\n  if (!allSameExpiration || !allSameSize) {\n    // Different expirations or sizes. Look for calendars, ratios, etc.\n    return null;\n  }\n\n  let exp = formatExpiration(optionInfos[0].expiration);\n  let describer = sameExpDescribers[score];\n  if (!describer) {\n    return null;\n  }\n\n  return describer(exp, optionInfos);\n}\n"],"file":"strategy.js"}