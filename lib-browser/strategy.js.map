{"version":3,"sources":["../src/strategy.ts"],"names":["_","optionInfoFromLeg","isShort","leg","size","isLong","isShortPut","call","isLongPut","isShortCall","isLongCall","LegType","legType","ShortCall","ShortPut","LongCall","LongPut","UnknownCombo","calculateComboScore","orderedLegs","length","x","i","type","comboScoreFromTypes","types","comboScores","shortIronCondor","shortInvertedIronCondor","shortStrangle","invertedShortStrangle","longStrangle","invertedLongStrangle","putCreditSpread","callCreditSpread","putDebitSpread","callDebitSpread","shortSinglePut","shortSingleCall","longSinglePut","longSingleCall","formatExpiration","expiration","sameExpDescribers","exp","legs","name","strike","classify","optionInfos","map","sortBy","score","otherLegs","slice","allSameExpiration","every","allSameSize","describer"],"mappings":"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","sourcesContent":["import { OptionLeg, OptionInfo, optionInfoFromSymbol } from './types';\nimport * as _ from 'lodash';\nimport { optionInfoFromLeg } from './index';\n\nexport type Classifier = (legs : OptionLeg[], score : ComboScore) => string|null;\n\nexport function isShort(leg : OptionInfo) { return leg.size < 0; }\nexport function isLong(leg : OptionInfo) { return leg.size > 0; }\nexport function isShortPut(leg : OptionInfo) { return !leg.call && isShort(leg); }\nexport function isLongPut(leg : OptionInfo) { return !leg.call && isLong(leg); }\nexport function isShortCall(leg : OptionInfo) { return leg.call && isShort(leg); }\nexport function isLongCall(leg: OptionInfo) { return leg.call && isLong(leg); }\n\nexport enum LegType {\n  ShortPut = 0,\n  LongPut = 1,\n  ShortCall = 2,\n  LongCall = 3,\n}\n\nexport function legType(leg : OptionInfo) : LegType {\n  if(isShort(leg)) {\n    return leg.call ? LegType.ShortCall : LegType.ShortPut;\n  } else {\n    return leg.call ? LegType.LongCall : LegType.LongPut;\n  }\n}\n\nexport type ComboScore = number;\nexport const UnknownCombo : ComboScore = 1;\n\nexport function calculateComboScore(orderedLegs : OptionInfo[]) : ComboScore {\n  if(orderedLegs.length > 8) {\n    return UnknownCombo;\n  }\n\n  let x : ComboScore = 0;\n  for(let i = 0; i < orderedLegs.length; i++) {\n    let type = legType(orderedLegs[i]);\n    x |= type << (i * 2);\n  }\n  return x;\n}\n\nexport function comboScoreFromTypes(types : LegType[]) : ComboScore {\n  let x : ComboScore = 0;\n  for(let i = 0; i < types.length; i++) {\n    x |= types[i] << (i * 2);\n  }\n  return x;\n}\n\nexport const comboScores = {\n  // Also iron butterfly\n  shortIronCondor: comboScoreFromTypes([LegType.LongPut, LegType.ShortPut, LegType.ShortCall, LegType.LongCall]),\n  shortInvertedIronCondor: comboScoreFromTypes([LegType.LongPut, LegType.ShortCall, LegType.ShortPut, LegType.LongCall]),\n  // TODO maybe other inverted IC combinations?\n\n  shortStrangle: comboScoreFromTypes([LegType.ShortPut, LegType.ShortCall]), // and straddle\n  invertedShortStrangle: comboScoreFromTypes([LegType.ShortCall, LegType.ShortPut]),\n  longStrangle: comboScoreFromTypes([LegType.LongPut, LegType.LongCall]), // and straddle\n  invertedLongStrangle: comboScoreFromTypes([LegType.LongCall, LegType.LongPut]),\n  putCreditSpread: comboScoreFromTypes([LegType.LongPut, LegType.ShortPut]),\n  callCreditSpread: comboScoreFromTypes([LegType.ShortCall, LegType.LongCall]),\n  putDebitSpread: comboScoreFromTypes([LegType.ShortPut, LegType.LongPut]),\n  callDebitSpread: comboScoreFromTypes([LegType.LongCall, LegType.ShortCall]),\n  shortSinglePut: comboScoreFromTypes([LegType.ShortPut]),\n  shortSingleCall: comboScoreFromTypes([LegType.ShortCall]),\n  longSinglePut: comboScoreFromTypes([LegType.LongPut]),\n  longSingleCall: comboScoreFromTypes([LegType.LongCall]),\n\n  // TODO Diagonal, double diagonal, calendars, ratios\n};\n\nexport function formatExpiration(expiration : string) {\n  // In the future this will format with a nice month/year/day.\n  return expiration;\n}\n\nexport const sameExpDescribers = {\n  [comboScores.shortIronCondor]: (exp : string, legs: OptionInfo[]) => {\n    let name = legs[1].strike === legs[2].strike ? 'Iron Butterfly' : 'Iron Condor';\n    return `${-legs[0].size} ${exp} ${legs[0].strike}/${legs[1].strike}P ${legs[2].strike}/${legs[3].strike}C ${name}`;\n  },\n  [comboScores.shortInvertedIronCondor]: (exp : string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} Inverted Iron Condor ${legs[0].strike}/${legs[1].strike}P ${legs[2].strike}/${legs[3].strike}C`;\n  },\n  [comboScores.shortStrangle]: (exp : string, legs : OptionInfo[]) => {\n    if(legs[0].strike === legs[1].strike) {\n      return `${-legs[0].size} ${exp} ${legs[0].strike} Short Straddle`;\n    } else {\n      return `${-legs[0].size} ${exp} ${legs[0].strike}P ${legs[1].strike}C Short Strangle`\n    }\n  },\n  [comboScores.invertedShortStrangle]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike}C ${legs[1].strike}P Inverted Short Strangle`;\n  },\n  [comboScores.longStrangle]: (exp: string, legs: OptionInfo[]) => {\n    if(legs[0].strike === legs[1].strike) {\n      return `${legs[0].size} ${exp} ${legs[0].strike} Long Straddle`;\n    } else {\n      return `${legs[0].size} ${exp} ${legs[0].strike}P ${legs[1].strike}C Long Strangle`\n    }\n  },\n  [comboScores.invertedLongStrangle]: (exp: string, legs: OptionInfo[]) => {\n    if(legs[0].strike === legs[1].strike) {\n      return `${legs[0].size} ${exp} ${legs[0].strike} Inverted Long Straddle`;\n    } else {\n      return `${legs[0].size} ${exp} ${legs[0].strike}C ${legs[1].strike}P Interted Long Strangle`\n    }\n  },\n\n  [comboScores.putCreditSpread]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike}/${legs[1].strike}P Put Credit Spread`;\n  },\n  [comboScores.callCreditSpread]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike}/${legs[1].strike}C Call Credit Spread`;\n  },\n  [comboScores.putDebitSpread]: (exp: string, legs: OptionInfo[]) => {\n    return `${legs[0].size} ${exp} ${legs[0].strike}/${legs[1].strike}P Put Debit Spread`;\n  },\n  [comboScores.callDebitSpread]: (exp: string, legs: OptionInfo[]) => {\n    return `${legs[0].size} ${exp} ${legs[0].strike}/${legs[1].strike}C Call Debit Spread`;\n  },\n\n  [comboScores.shortSinglePut]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike} Short Put`;\n  },\n  [comboScores.shortSingleCall]: (exp: string, legs: OptionInfo[]) => {\n    return `${-legs[0].size} ${exp} ${legs[0].strike} Short Call`;\n  },\n  [comboScores.longSinglePut]: (exp: string, legs: OptionInfo[]) => {\n    return `${legs[0].size} ${exp} ${legs[0].strike} Long Put`;\n  },\n  [comboScores.longSingleCall]: (exp: string, legs: OptionInfo[]) => {\n    return `${legs[0].size} ${exp} ${legs[0].strike} Long Call`;\n  },\n};\n\nexport function classify(legs : OptionLeg[]) {\n  let optionInfos = _.map(legs, optionInfoFromLeg);\n  let orderedLegs = _.sortBy(optionInfos, ['strike', 'call', 'expiration']);\n  let score = calculateComboScore(orderedLegs);\n  let expiration = optionInfos[0].expiration;\n  let size = optionInfos[0].size;\n\n  let otherLegs = optionInfos.slice(1);\n  let allSameExpiration = _.every(otherLegs, (leg) => leg.expiration === expiration);\n  let allSameSize = _.every(otherLegs, (leg) => leg.size === size);\n  if(!allSameExpiration || !allSameSize) {\n    // Different expirations or sizes. Look for calendars, ratios, etc.\n    return null;\n  }\n\n  let exp = formatExpiration(optionInfos[0].expiration);\n  let describer = sameExpDescribers[score];\n  if(!describer) {\n    return null;\n  }\n\n  return describer(exp, optionInfos);\n}\n"],"file":"strategy.js"}