{"version":3,"sources":["../src/position_simulator.ts"],"names":["Change","PositionSimulator","constructor","initial","legs","leg","symbol","list","push","getFlattenedList","size","filter","Boolean","addLegs","addLeg","existing","length","affected","changedBy","change","Opened","changeAmount","totalSize","created","pnl","result","newExisting","remaining","absRemaining","Math","abs","el","absSize","Closed","price","closedLeg","Reduced","newLeg","undefined"],"mappings":"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","sourcesContent":["import { OptionLeg, fullSymbol } from './types';\nimport sumBy from 'lodash/sumBy';\nimport each from 'lodash/each';\nimport map from 'lodash/map';\nimport flatMap from 'lodash/flatMap';\n\nexport enum Change {\n  // The leg in `changedBy` closed the affected leg.\n  Closed,\n\n  // A new position was opened by this leg. `affected` and `changedBy` will be the same object.\n  Opened,\n\n  // A position was partially closed by a leg. This will always be followed by an Closed result for the closed portion of the legs.\n  // When the result is Reduced, `affected.size` will reflect the new number of options in the leg.\n  Reduced,\n}\n\nexport interface SimulationStep {\n  affected: OptionLeg;\n  changedBy: OptionLeg;\n  change: Change;\n  changeAmount: number;\n  totalSize: number;\n  pnl?: number;\n  created: boolean;\n}\n\nexport type SimulationResults = SimulationStep[];\n\n// Simulate executions and their effect on a portfolio.\nexport class PositionSimulator {\n  legs: { [key: string]: OptionLeg[] };\n\n  constructor(initial?: OptionLeg[]) {\n    this.legs = {};\n    each(initial, (leg) => {\n      let symbol = leg.symbol;\n      let list = this.legs[symbol];\n      if (list) {\n        list.push(leg);\n      } else {\n        this.legs[symbol] = [leg];\n      }\n    });\n  }\n\n  getFlattenedList(): OptionLeg[] {\n    return map(this.legs, (legs, symbol) => {\n      let size = sumBy(legs, 'size');\n      if (size !== 0) {\n        return { symbol, size };\n      }\n    }).filter(Boolean);\n  }\n\n  addLegs(legs: OptionLeg[]): SimulationResults {\n    return flatMap(legs, (leg) => this.addLeg(leg));\n  }\n\n  addLeg(leg: OptionLeg): SimulationResults {\n    let symbol = leg.symbol;\n    let existing = this.legs[symbol];\n    if (!existing || !existing.length) {\n      this.legs[symbol] = [leg];\n      return [\n        {\n          affected: leg,\n          changedBy: leg,\n          change: Change.Opened,\n          changeAmount: leg.size,\n          totalSize: leg.size,\n          created: true,\n          pnl: 0, // Never any P&L on an opening.\n        },\n      ];\n    } else if (existing[0].size * leg.size > 0) {\n      // The size of the existing legs and the new leg have the same sign, so this is expanding an existing position.\n      existing.push(leg);\n      return [\n        {\n          affected: leg,\n          changedBy: leg,\n          change: Change.Opened,\n          changeAmount: leg.size,\n          totalSize: sumBy(existing, 'size'),\n          created: true,\n          pnl: 0,\n        },\n      ];\n    }\n\n    // If we get down to here, then it's closing a position.\n    let result: SimulationResults = [];\n    let newExisting: OptionLeg[] = [];\n    let totalSize = sumBy(existing, 'size') + leg.size;\n\n    let remaining = leg.size;\n    let absRemaining = Math.abs(remaining);\n\n    each(existing, (el) => {\n      let absSize = Math.abs(el.size);\n      if (absSize <= absRemaining) {\n        // The new leg completely closes out this one.\n        result.push({\n          affected: el,\n          changedBy: leg,\n          change: Change.Closed,\n          changeAmount: -el.size,\n          totalSize,\n          created: false,\n          pnl: (el.price - leg.price) * el.size,\n        });\n\n        remaining -= el.size;\n        absRemaining -= absSize;\n      } else if (absRemaining !== 0) {\n        // The new leg partially closes this one, so split it into two legs, one that is the closed portion and one that is the\n        // still-active portion.\n        el.size += remaining;\n        newExisting.push(el);\n\n        // The closed leg should be the newly created object, so that the one that remains in the system is the same leg that was originally added.\n        let closedLeg = { ...el };\n        closedLeg.size = -remaining;\n\n        result.push(\n          {\n            affected: el,\n            changedBy: leg,\n            change: Change.Reduced,\n            changeAmount: remaining,\n            totalSize,\n            created: false,\n            pnl: null,\n          },\n          {\n            affected: closedLeg,\n            changedBy: leg,\n            change: Change.Closed,\n            changeAmount: remaining,\n            totalSize,\n            created: true,\n            pnl: (el.price - leg.price) * remaining,\n          }\n        );\n\n        remaining = absRemaining = 0;\n      } else {\n        // No effect since the new leg has already been applied fully.\n        newExisting.push(el);\n      }\n    });\n\n    if (absRemaining > 0) {\n      // This leg not only closed some positions, but opened new ones.\n      let newLeg = { ...leg };\n      newLeg.size = remaining;\n\n      result.push({\n        affected: newLeg,\n        changedBy: leg,\n        change: Change.Opened,\n        changeAmount: newLeg.size,\n        totalSize,\n        created: true,\n        pnl: null,\n      });\n    }\n\n    this.legs[symbol] = newExisting.length ? newExisting : undefined;\n    return result;\n  }\n}\n"],"file":"position_simulator.js"}